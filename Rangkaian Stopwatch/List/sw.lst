
AVRASM ver. 2.1.30  D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm Fri Aug 28 23:49:34 2015

D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1072): warning: Register r5 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1073): warning: Register r4 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1074): warning: Register r7 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1075): warning: Register r6 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1076): warning: Register r9 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1077): warning: Register r8 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1078): warning: Register r11 already defined by the .DEF directive
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1079): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.3 Standard
                 ;(C) Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 12.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;Global 'const' stored in FLASH     : No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions         : On
                 ;Smart register allocation          : On
                 ;Automatic register allocation      : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1119
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R5
                 	.DEF _indeks=R4
                 	.DEF _detik=R7
                 	.DEF _menit=R6
                 	.DEF _jam=R9
                 	.DEF __lcd_x=R8
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 008e 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x18:
000033 0000
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x0:
000036 6954
000037 656d
000038 2072
000039 6425      	.DB  0x54,0x69,0x6D,0x65,0x72,0x20,0x25,0x64
00003a 253a
00003b 3a64
00003c 6425
00003d 253a      	.DB  0x3A,0x25,0x64,0x3A,0x25,0x64,0x3A,0x25
00003e 0064
00003f 5453
000040 5241
000041 0054      	.DB  0x64,0x0,0x53,0x54,0x41,0x52,0x54,0x0
000042 5453
000043 504f
000044 5300
000045 4154      	.DB  0x53,0x54,0x4F,0x50,0x0,0x53,0x54,0x41
000046 5452
000047 2020
000048 2020
000049 2020      	.DB  0x52,0x54,0x20,0x20,0x20,0x20,0x20,0x20
00004a 4552
00004b 4553
00004c 0054      	.DB  0x52,0x45,0x53,0x45,0x54,0x0
                 _0x2020060:
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1126): warning: .cseg .db misalignment - padding zero byte
00004d 0001      	.DB  0x1
                 _0x2020000:
00004e 4e2d
00004f 4e41
000050 4900
000051 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Ngampus\Workspace\AVR\Rangkaian Stopwatch\program\List\sw.asm(1129): warning: .cseg .db misalignment - padding zero byte
000052 0000      	.DB  0x0
                 _0x2040003:
000053 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000054 0006      	.DW  0x06
000055 0004      	.DW  0x04
000056 0066      	.DW  _0x18*2
                 
000057 0001      	.DW  0x01
000058 0170      	.DW  __seed_G101
000059 009a      	.DW  _0x2020060*2
                 
00005a 0002      	.DW  0x02
00005b 0174      	.DW  __base_y_G102
00005c 00a6      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bffb      	OUT  GICR,R31
000063 bfeb      	OUT  GICR,R30
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000065 e1f8      	LDI  R31,0x18
000066 bdf1      	OUT  WDTCR,R31
000067 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000068 e08d      	LDI  R24,(14-2)+1
000069 e0a2      	LDI  R26,2
00006a 27bb      	CLR  R27
                 __CLEAR_REG:
00006b 93ed      	ST   X+,R30
00006c 958a      	DEC  R24
00006d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006f e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000070 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000071 93ed      	ST   X+,R30
000072 9701      	SBIW R24,1
000073 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000074 eae8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000075 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000076 9185      	LPM  R24,Z+
000077 9195      	LPM  R25,Z+
000078 9700      	SBIW R24,0
000079 f061      	BREQ __GLOBAL_INI_END
00007a 91a5      	LPM  R26,Z+
00007b 91b5      	LPM  R27,Z+
00007c 9005      	LPM  R0,Z+
00007d 9015      	LPM  R1,Z+
00007e 01bf      	MOVW R22,R30
00007f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000080 9005      	LPM  R0,Z+
000081 920d      	ST   X+,R0
000082 9701      	SBIW R24,1
000083 f7e1      	BRNE __GLOBAL_INI_LOOP
000084 01fb      	MOVW R30,R22
000085 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000086 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000087 bfed      	OUT  SPL,R30
000088 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000089 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008b e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008c 940c 0118 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;unsigned char count, temp[16], indeks=0;
                 ;unsigned char detik=0, menit=0, jam=0;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#include <delay.h>
                 ;// Alphanumeric LCD Module functions
                 ;#asm
                    .equ __lcd_port=0x15 ;PORTC
                 ; 0000 000A #endasm
                 ;#include <lcd.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00008e 93ea      	ST   -Y,R30
00008f b7ef      	IN   R30,SREG
000090 93ea      	ST   -Y,R30
                 ; 0000 0010 // Reinitialize Timer 0 value
                 ; 0000 0011 TCNT0=0x8A;
000091 e8ea      	LDI  R30,LOW(138)
000092 bfe2      	OUT  0x32,R30
                 ; 0000 0012 count++;
000093 9453      	INC  R5
                 ; 0000 0013 }
000094 91e9      	LD   R30,Y+
000095 bfef      	OUT  SREG,R30
000096 91e9      	LD   R30,Y+
000097 9518      	RETI
                 ;
                 ;
                 ;void hitung_waktu()
                 ; 0000 0017 {
                 _hitung_waktu:
                 ; 0000 0018 if (count>=100)
000098 e6e4      	LDI  R30,LOW(100)
000099 165e      	CP   R5,R30
00009a f020      	BRLO _0x3
                 ; 0000 0019     {
                 ; 0000 001A     lcd_clear();
00009b 940e 032a 	CALL _lcd_clear
                 ; 0000 001B     detik++;
00009d 9473      	INC  R7
                 ; 0000 001C     count=0;
00009e 2455      	CLR  R5
                 ; 0000 001D     }
                 ; 0000 001E 
                 ; 0000 001F if (detik>=60)
                 _0x3:
00009f e3ec      	LDI  R30,LOW(60)
0000a0 167e      	CP   R7,R30
0000a1 f010      	BRLO _0x4
                 ; 0000 0020     {
                 ; 0000 0021     menit++;
0000a2 9463      	INC  R6
                 ; 0000 0022     detik=0;
0000a3 2477      	CLR  R7
                 ; 0000 0023     }
                 ; 0000 0024 
                 ; 0000 0025 if (menit>=60)
                 _0x4:
0000a4 e3ec      	LDI  R30,LOW(60)
0000a5 166e      	CP   R6,R30
0000a6 f010      	BRLO _0x5
                 ; 0000 0026     {
                 ; 0000 0027     jam++;
0000a7 9493      	INC  R9
                 ; 0000 0028     menit=0;
0000a8 2466      	CLR  R6
                 ; 0000 0029     }
                 ; 0000 002A }
                 _0x5:
0000a9 9508      	RET
                 ;
                 ;
                 ;void detek_tombol()
                 ; 0000 002E {
                 _detek_tombol:
                 ; 0000 002F if (PINA.0==0 && (indeks==0 || indeks==2))//run timer
0000aa e0a0      	LDI  R26,0
0000ab 99c8      	SBIC 0x19,0
0000ac e0a1      	LDI  R26,1
0000ad 30a0      	CPI  R26,LOW(0x0)
0000ae f439      	BRNE _0x7
0000af e0e0      	LDI  R30,LOW(0)
0000b0 15e4      	CP   R30,R4
0000b1 f019      	BREQ _0x8
0000b2 e0e2      	LDI  R30,LOW(2)
0000b3 15e4      	CP   R30,R4
0000b4 f409      	BRNE _0x7
                 _0x8:
0000b5 c001      	RJMP _0xA
                 _0x7:
0000b6 c005      	RJMP _0x6
                 _0xA:
                 ; 0000 0030     {
                 ; 0000 0031     indeks=1;
0000b7 e0e1      	LDI  R30,LOW(1)
0000b8 2e4e      	MOV  R4,R30
                 ; 0000 0032     TIMSK=0x01;
0000b9 bfe9      	OUT  0x39,R30
                 ; 0000 0033     lcd_clear();
0000ba 940e 032a 	CALL _lcd_clear
                 ; 0000 0034     }
                 ; 0000 0035 
                 ; 0000 0036 if (PINA.1==0 && indeks==1)//stop timer
                 _0x6:
0000bc e0a0      	LDI  R26,0
0000bd 99c9      	SBIC 0x19,1
0000be e0a1      	LDI  R26,1
0000bf 30a0      	CPI  R26,LOW(0x0)
0000c0 f419      	BRNE _0xC
0000c1 e0e1      	LDI  R30,LOW(1)
0000c2 15e4      	CP   R30,R4
0000c3 f009      	BREQ _0xD
                 _0xC:
0000c4 c006      	RJMP _0xB
                 _0xD:
                 ; 0000 0037     {
                 ; 0000 0038     indeks=2;
0000c5 e0e2      	LDI  R30,LOW(2)
0000c6 2e4e      	MOV  R4,R30
                 ; 0000 0039     TIMSK=0x00;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bfe9      	OUT  0x39,R30
                 ; 0000 003A     lcd_clear();
0000c9 940e 032a 	CALL _lcd_clear
                 ; 0000 003B     }
                 ; 0000 003C 
                 ; 0000 003D if (PINA.2==0 && indeks==2)//reset timer
                 _0xB:
0000cb e0a0      	LDI  R26,0
0000cc 99ca      	SBIC 0x19,2
0000cd e0a1      	LDI  R26,1
0000ce 30a0      	CPI  R26,LOW(0x0)
0000cf f419      	BRNE _0xF
0000d0 e0e2      	LDI  R30,LOW(2)
0000d1 15e4      	CP   R30,R4
0000d2 f009      	BREQ _0x10
                 _0xF:
0000d3 c007      	RJMP _0xE
                 _0x10:
                 ; 0000 003E     {
                 ; 0000 003F     indeks=0;
0000d4 2444      	CLR  R4
                 ; 0000 0040     count=0;
0000d5 2455      	CLR  R5
                 ; 0000 0041     detik=0;
0000d6 2477      	CLR  R7
                 ; 0000 0042     menit=0;
0000d7 2466      	CLR  R6
                 ; 0000 0043     jam=0;
0000d8 2499      	CLR  R9
                 ; 0000 0044     lcd_clear();
0000d9 940e 032a 	CALL _lcd_clear
                 ; 0000 0045     }
                 ; 0000 0046 }
                 _0xE:
0000db 9508      	RET
                 ;
                 ;void tampil_lcd()
                 ; 0000 0049 {
                 _tampil_lcd:
                 ; 0000 004A lcd_gotoxy(0,0);
0000dc e0e0      	LDI  R30,LOW(0)
0000dd 93ea      	ST   -Y,R30
0000de e0a0      	LDI  R26,LOW(0)
0000df 940e 031a 	CALL _lcd_gotoxy
                 ; 0000 004B sprintf(temp,"Timer %d:%d:%d:%d",jam,menit,detik,count);
0000e1 e6e0      	LDI  R30,LOW(_temp)
0000e2 e0f1      	LDI  R31,HIGH(_temp)
0000e3 93fa      	ST   -Y,R31
0000e4 93ea      	ST   -Y,R30
                +
0000e5 e6ec     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000e6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000e7 93fa      	ST   -Y,R31
0000e8 93ea      	ST   -Y,R30
0000e9 2de9      	MOV  R30,R9
0000ea 940e 03d6 	CALL SUBOPT_0x0
0000ec 2de6      	MOV  R30,R6
0000ed 940e 03d6 	CALL SUBOPT_0x0
0000ef 2de7      	MOV  R30,R7
0000f0 940e 03d6 	CALL SUBOPT_0x0
0000f2 2de5      	MOV  R30,R5
0000f3 940e 03d6 	CALL SUBOPT_0x0
0000f5 e180      	LDI  R24,16
0000f6 940e 02a6 	CALL _sprintf
0000f8 9664      	ADIW R28,20
                 ; 0000 004C lcd_puts(temp);//tampilkan waktu di LCD baris pertama
0000f9 e6a0      	LDI  R26,LOW(_temp)
0000fa e0b1      	LDI  R27,HIGH(_temp)
0000fb 940e 0357 	CALL _lcd_puts
                 ; 0000 004D 
                 ; 0000 004E if (indeks==0)
0000fd 2044      	TST  R4
0000fe f431      	BRNE _0x11
                 ; 0000 004F     {
                 ; 0000 0050     lcd_gotoxy(0,1);
0000ff 940e 03dc 	CALL SUBOPT_0x1
                 ; 0000 0051     lcd_putsf("START");
                +
000101 e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 18 ) )
000102 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 18 ) )
                 	__POINTW2FN _0x0,18
000103 940e 0366 	CALL _lcd_putsf
                 ; 0000 0052     }
                 ; 0000 0053 
                 ; 0000 0054 if (indeks==1)
                 _0x11:
000105 e0e1      	LDI  R30,LOW(1)
000106 15e4      	CP   R30,R4
000107 f431      	BRNE _0x12
                 ; 0000 0055     {
                 ; 0000 0056     lcd_gotoxy(0,1);
000108 940e 03dc 	CALL SUBOPT_0x1
                 ; 0000 0057     lcd_putsf("STOP");
                +
00010a e8a4     +LDI R26 , LOW ( 2 * _0x0 + ( 24 ) )
00010b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 24 ) )
                 	__POINTW2FN _0x0,24
00010c 940e 0366 	CALL _lcd_putsf
                 ; 0000 0058     }
                 ; 0000 0059 
                 ; 0000 005A if (indeks==2)
                 _0x12:
00010e e0e2      	LDI  R30,LOW(2)
00010f 15e4      	CP   R30,R4
000110 f431      	BRNE _0x13
                 ; 0000 005B     {
                 ; 0000 005C     lcd_gotoxy(0,1);
000111 940e 03dc 	CALL SUBOPT_0x1
                 ; 0000 005D     lcd_putsf("START      RESET");
                +
000113 e8a9     +LDI R26 , LOW ( 2 * _0x0 + ( 29 ) )
000114 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW2FN _0x0,29
000115 940e 0366 	CALL _lcd_putsf
                 ; 0000 005E     }
                 ; 0000 005F }
                 _0x13:
000117 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 0062 {
                 _main:
                 ; 0000 0063 PORTA=0x0f;
000118 e0ef      	LDI  R30,LOW(15)
000119 bbeb      	OUT  0x1B,R30
                 ; 0000 0064 DDRA=0x00;
00011a e0e0      	LDI  R30,LOW(0)
00011b bbea      	OUT  0x1A,R30
                 ; 0000 0065 
                 ; 0000 0066 // Timer/Counter 0 initialization
                 ; 0000 0067 // Clock source: System Clock
                 ; 0000 0068 // Clock value: 11.719 kHz
                 ; 0000 0069 // Mode: Normal top=FFh
                 ; 0000 006A // OC0 output: Disconnected
                 ; 0000 006B TCCR0=0x05;
00011c e0e5      	LDI  R30,LOW(5)
00011d bfe3      	OUT  0x33,R30
                 ; 0000 006C TCNT0=0x8A;
00011e e8ea      	LDI  R30,LOW(138)
00011f bfe2      	OUT  0x32,R30
                 ; 0000 006D OCR0=0x00;
000120 e0e0      	LDI  R30,LOW(0)
000121 bfec      	OUT  0x3C,R30
                 ; 0000 006E 
                 ; 0000 006F // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0070 //TIMSK=0x00;
                 ; 0000 0071 
                 ; 0000 0072 // Analog Comparator initialization
                 ; 0000 0073 // Analog Comparator: Off
                 ; 0000 0074 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0075 ACSR=0x80;
000122 e8e0      	LDI  R30,LOW(128)
000123 b9e8      	OUT  0x8,R30
                 ; 0000 0076 SFIOR=0x00;
000124 e0e0      	LDI  R30,LOW(0)
000125 bfe0      	OUT  0x30,R30
                 ; 0000 0077 
                 ; 0000 0078 // LCD module initialization
                 ; 0000 0079 lcd_init(16);
000126 e1a0      	LDI  R26,LOW(16)
000127 940e 038a 	CALL _lcd_init
                 ; 0000 007A 
                 ; 0000 007B // Global enable interrupts
                 ; 0000 007C #asm("sei")
000129 9478      	sei
                 ; 0000 007D 
                 ; 0000 007E while (1)
                 _0x14:
                 ; 0000 007F       {
                 ; 0000 0080       detek_tombol();
00012a df7f      	RCALL _detek_tombol
                 ; 0000 0081       hitung_waktu();
00012b df6c      	RCALL _hitung_waktu
                 ; 0000 0082       tampil_lcd();
00012c dfaf      	RCALL _tampil_lcd
                 ; 0000 0083       };
00012d cffc      	RJMP _0x14
                 ; 0000 0084 }
                 _0x17:
00012e cfff      	RJMP _0x17
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
00012f 93ba      	ST   -Y,R27
000130 93aa      	ST   -Y,R26
000131 931a      	ST   -Y,R17
000132 930a      	ST   -Y,R16
000133 81aa      	LDD  R26,Y+2
000134 81bb      	LDD  R27,Y+2+1
000135 9612      	ADIW R26,2
000136 940e 041e 	CALL __GETW1P
000138 9730      	SBIW R30,0
000139 f159      	BREQ _0x2000010
00013a 81aa      	LDD  R26,Y+2
00013b 81bb      	LDD  R27,Y+2+1
00013c 9614      	ADIW R26,4
00013d 940e 041e 	CALL __GETW1P
00013f 018f      	MOVW R16,R30
000140 9730      	SBIW R30,0
000141 f061      	BREQ _0x2000012
                +
000142 3002     +CPI R16 , LOW ( 2 )
000143 e0e0     +LDI R30 , HIGH ( 2 )
000144 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000145 f0f0      	BRLO _0x2000013
000146 01f8      	MOVW R30,R16
000147 9731      	SBIW R30,1
000148 018f      	MOVW R16,R30
                +
000149 81aa     +LDD R26 , Y + 2
00014a 81bb     +LDD R27 , Y + 2 + 1
00014b 9614     +ADIW R26 , 4
00014c 93ed     +ST X + , R30
00014d 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00014e 81aa      	LDD  R26,Y+2
00014f 81bb      	LDD  R27,Y+2+1
000150 9612      	ADIW R26,2
000151 91ed      	LD   R30,X+
000152 91fd      	LD   R31,X+
000153 9631      	ADIW R30,1
000154 93fe      	ST   -X,R31
000155 93ee      	ST   -X,R30
000156 9731      	SBIW R30,1
000157 81ac      	LDD  R26,Y+4
000158 83a0      	STD  Z+0,R26
000159 81aa      	LDD  R26,Y+2
00015a 81bb      	LDD  R27,Y+2+1
00015b 940e 041e 	CALL __GETW1P
00015d 23ff      	TST  R31
00015e f02a      	BRMI _0x2000014
00015f 91ed      	LD   R30,X+
000160 91fd      	LD   R31,X+
000161 9631      	ADIW R30,1
000162 93fe      	ST   -X,R31
000163 93ee      	ST   -X,R30
                 _0x2000014:
                 _0x2000013:
000164 c006      	RJMP _0x2000015
                 _0x2000010:
000165 81aa      	LDD  R26,Y+2
000166 81bb      	LDD  R27,Y+2+1
000167 efef      	LDI  R30,LOW(65535)
000168 efff      	LDI  R31,HIGH(65535)
000169 93ed      	ST   X+,R30
00016a 93fc      	ST   X,R31
                 _0x2000015:
00016b 8119      	LDD  R17,Y+1
00016c 8108      	LDD  R16,Y+0
00016d 9625      	ADIW R28,5
00016e 9508      	RET
                 __print_G100:
00016f 93ba      	ST   -Y,R27
000170 93aa      	ST   -Y,R26
000171 9726      	SBIW R28,6
000172 940e 042b 	CALL __SAVELOCR6
000174 e010      	LDI  R17,0
000175 85ac      	LDD  R26,Y+12
000176 85bd      	LDD  R27,Y+12+1
000177 e0e0      	LDI  R30,LOW(0)
000178 e0f0      	LDI  R31,HIGH(0)
000179 93ed      	ST   X+,R30
00017a 93fc      	ST   X,R31
                 _0x2000016:
00017b 89ea      	LDD  R30,Y+18
00017c 89fb      	LDD  R31,Y+18+1
00017d 9631      	ADIW R30,1
00017e 8bea      	STD  Y+18,R30
00017f 8bfb      	STD  Y+18+1,R31
000180 9731      	SBIW R30,1
000181 91e4      	LPM  R30,Z
000182 2f2e      	MOV  R18,R30
000183 30e0      	CPI  R30,0
000184 f411      	BRNE PC+3
000185 940c 029e 	JMP _0x2000018
000187 2fe1      	MOV  R30,R17
000188 30e0      	CPI  R30,0
000189 f439      	BRNE _0x200001C
00018a 3225      	CPI  R18,37
00018b f411      	BRNE _0x200001D
00018c e011      	LDI  R17,LOW(1)
00018d c002      	RJMP _0x200001E
                 _0x200001D:
00018e 940e 03e1 	CALL SUBOPT_0x2
                 _0x200001E:
000190 c10c      	RJMP _0x200001B
                 _0x200001C:
000191 30e1      	CPI  R30,LOW(0x1)
000192 f4a9      	BRNE _0x200001F
000193 3225      	CPI  R18,37
000194 f419      	BRNE _0x2000020
000195 940e 03e1 	CALL SUBOPT_0x2
000197 c104      	RJMP _0x20000C9
                 _0x2000020:
000198 e012      	LDI  R17,LOW(2)
000199 e040      	LDI  R20,LOW(0)
00019a e000      	LDI  R16,LOW(0)
00019b 322d      	CPI  R18,45
00019c f411      	BRNE _0x2000021
00019d e001      	LDI  R16,LOW(1)
00019e c0fe      	RJMP _0x200001B
                 _0x2000021:
00019f 322b      	CPI  R18,43
0001a0 f411      	BRNE _0x2000022
0001a1 e24b      	LDI  R20,LOW(43)
0001a2 c0fa      	RJMP _0x200001B
                 _0x2000022:
0001a3 3220      	CPI  R18,32
0001a4 f411      	BRNE _0x2000023
0001a5 e240      	LDI  R20,LOW(32)
0001a6 c0f6      	RJMP _0x200001B
                 _0x2000023:
0001a7 c002      	RJMP _0x2000024
                 _0x200001F:
0001a8 30e2      	CPI  R30,LOW(0x2)
0001a9 f439      	BRNE _0x2000025
                 _0x2000024:
0001aa e050      	LDI  R21,LOW(0)
0001ab e013      	LDI  R17,LOW(3)
0001ac 3320      	CPI  R18,48
0001ad f411      	BRNE _0x2000026
0001ae 6800      	ORI  R16,LOW(128)
0001af c0ed      	RJMP _0x200001B
                 _0x2000026:
0001b0 c004      	RJMP _0x2000027
                 _0x2000025:
0001b1 30e3      	CPI  R30,LOW(0x3)
0001b2 f011      	BREQ PC+3
0001b3 940c 029d 	JMP _0x200001B
                 _0x2000027:
0001b5 3320      	CPI  R18,48
0001b6 f010      	BRLO _0x200002A
0001b7 332a      	CPI  R18,58
0001b8 f008      	BRLO _0x200002B
                 _0x200002A:
0001b9 c007      	RJMP _0x2000029
                 _0x200002B:
0001ba e0aa      	LDI  R26,LOW(10)
0001bb 9f5a      	MUL  R21,R26
0001bc 2d50      	MOV  R21,R0
0001bd 2fe2      	MOV  R30,R18
0001be 53e0      	SUBI R30,LOW(48)
0001bf 0f5e      	ADD  R21,R30
0001c0 c0dc      	RJMP _0x200001B
                 _0x2000029:
0001c1 2fe2      	MOV  R30,R18
0001c2 36e3      	CPI  R30,LOW(0x63)
0001c3 f449      	BRNE _0x200002F
0001c4 940e 03e8 	CALL SUBOPT_0x3
0001c6 89e8      	LDD  R30,Y+16
0001c7 89f9      	LDD  R31,Y+16+1
0001c8 81a4      	LDD  R26,Z+4
0001c9 93aa      	ST   -Y,R26
0001ca 940e 03ee 	CALL SUBOPT_0x4
0001cc c0cf      	RJMP _0x2000030
                 _0x200002F:
0001cd 37e3      	CPI  R30,LOW(0x73)
0001ce f441      	BRNE _0x2000032
0001cf 940e 03e8 	CALL SUBOPT_0x3
0001d1 940e 03f4 	CALL SUBOPT_0x5
0001d3 940e 03bd 	CALL _strlen
0001d5 2f1e      	MOV  R17,R30
0001d6 c00a      	RJMP _0x2000033
                 _0x2000032:
0001d7 37e0      	CPI  R30,LOW(0x70)
0001d8 f461      	BRNE _0x2000035
0001d9 940e 03e8 	CALL SUBOPT_0x3
0001db 940e 03f4 	CALL SUBOPT_0x5
0001dd 940e 03c9 	CALL _strlenf
0001df 2f1e      	MOV  R17,R30
0001e0 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001e1 6002      	ORI  R16,LOW(2)
0001e2 770f      	ANDI R16,LOW(127)
0001e3 e030      	LDI  R19,LOW(0)
0001e4 c035      	RJMP _0x2000036
                 _0x2000035:
0001e5 36e4      	CPI  R30,LOW(0x64)
0001e6 f011      	BREQ _0x2000039
0001e7 36e9      	CPI  R30,LOW(0x69)
0001e8 f411      	BRNE _0x200003A
                 _0x2000039:
0001e9 6004      	ORI  R16,LOW(4)
0001ea c002      	RJMP _0x200003B
                 _0x200003A:
0001eb 37e5      	CPI  R30,LOW(0x75)
0001ec f431      	BRNE _0x200003C
                 _0x200003B:
0001ed e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001ee e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001ef 83ee      	STD  Y+6,R30
0001f0 83ff      	STD  Y+6+1,R31
0001f1 e015      	LDI  R17,LOW(5)
0001f2 c00d      	RJMP _0x200003D
                 _0x200003C:
0001f3 35e8      	CPI  R30,LOW(0x58)
0001f4 f411      	BRNE _0x200003F
0001f5 6008      	ORI  R16,LOW(8)
0001f6 c004      	RJMP _0x2000040
                 _0x200003F:
0001f7 37e8      	CPI  R30,LOW(0x78)
0001f8 f011      	BREQ PC+3
0001f9 940c 029c 	JMP _0x2000071
                 _0x2000040:
0001fb e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001fc e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001fd 83ee      	STD  Y+6,R30
0001fe 83ff      	STD  Y+6+1,R31
0001ff e014      	LDI  R17,LOW(4)
                 _0x200003D:
000200 ff02      	SBRS R16,2
000201 c014      	RJMP _0x2000042
000202 940e 03e8 	CALL SUBOPT_0x3
000204 940e 03fe 	CALL SUBOPT_0x6
000206 85ab      	LDD  R26,Y+11
000207 23aa      	TST  R26
000208 f43a      	BRPL _0x2000043
000209 85ea      	LDD  R30,Y+10
00020a 85fb      	LDD  R31,Y+10+1
00020b 940e 041a 	CALL __ANEGW1
00020d 87ea      	STD  Y+10,R30
00020e 87fb      	STD  Y+10+1,R31
00020f e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000210 3040      	CPI  R20,0
000211 f011      	BREQ _0x2000044
000212 5f1f      	SUBI R17,-LOW(1)
000213 c001      	RJMP _0x2000045
                 _0x2000044:
000214 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000215 c004      	RJMP _0x2000046
                 _0x2000042:
000216 940e 03e8 	CALL SUBOPT_0x3
000218 940e 03fe 	CALL SUBOPT_0x6
                 _0x2000046:
                 _0x2000036:
00021a fd00      	SBRC R16,0
00021b c011      	RJMP _0x2000047
                 _0x2000048:
00021c 1715      	CP   R17,R21
00021d f478      	BRSH _0x200004A
00021e ff07      	SBRS R16,7
00021f c008      	RJMP _0x200004B
000220 ff02      	SBRS R16,2
000221 c004      	RJMP _0x200004C
000222 7f0b      	ANDI R16,LOW(251)
000223 2f24      	MOV  R18,R20
000224 5011      	SUBI R17,LOW(1)
000225 c001      	RJMP _0x200004D
                 _0x200004C:
000226 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000227 c001      	RJMP _0x200004E
                 _0x200004B:
000228 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000229 940e 03e1 	CALL SUBOPT_0x2
00022b 5051      	SUBI R21,LOW(1)
00022c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00022d 2f31      	MOV  R19,R17
00022e ff01      	SBRS R16,1
00022f c017      	RJMP _0x200004F
                 _0x2000050:
000230 3030      	CPI  R19,0
000231 f0a1      	BREQ _0x2000052
000232 ff03      	SBRS R16,3
000233 c006      	RJMP _0x2000053
000234 81ee      	LDD  R30,Y+6
000235 81ff      	LDD  R31,Y+6+1
000236 9125      	LPM  R18,Z+
000237 83ee      	STD  Y+6,R30
000238 83ff      	STD  Y+6+1,R31
000239 c005      	RJMP _0x2000054
                 _0x2000053:
00023a 81ae      	LDD  R26,Y+6
00023b 81bf      	LDD  R27,Y+6+1
00023c 912d      	LD   R18,X+
00023d 83ae      	STD  Y+6,R26
00023e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00023f 940e 03e1 	CALL SUBOPT_0x2
000241 3050      	CPI  R21,0
000242 f009      	BREQ _0x2000055
000243 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000244 5031      	SUBI R19,LOW(1)
000245 cfea      	RJMP _0x2000050
                 _0x2000052:
000246 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000247 e320      	LDI  R18,LOW(48)
000248 81ee      	LDD  R30,Y+6
000249 81ff      	LDD  R31,Y+6+1
00024a 940e 0422 	CALL __GETW1PF
00024c 87e8      	STD  Y+8,R30
00024d 87f9      	STD  Y+8+1,R31
00024e 81ee      	LDD  R30,Y+6
00024f 81ff      	LDD  R31,Y+6+1
000250 9632      	ADIW R30,2
000251 83ee      	STD  Y+6,R30
000252 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000253 85e8      	LDD  R30,Y+8
000254 85f9      	LDD  R31,Y+8+1
000255 85aa      	LDD  R26,Y+10
000256 85bb      	LDD  R27,Y+10+1
000257 17ae      	CP   R26,R30
000258 07bf      	CPC  R27,R31
000259 f050      	BRLO _0x200005C
00025a 5f2f      	SUBI R18,-LOW(1)
00025b 85a8      	LDD  R26,Y+8
00025c 85b9      	LDD  R27,Y+8+1
00025d 85ea      	LDD  R30,Y+10
00025e 85fb      	LDD  R31,Y+10+1
00025f 1bea      	SUB  R30,R26
000260 0bfb      	SBC  R31,R27
000261 87ea      	STD  Y+10,R30
000262 87fb      	STD  Y+10+1,R31
000263 cfef      	RJMP _0x200005A
                 _0x200005C:
000264 332a      	CPI  R18,58
000265 f028      	BRLO _0x200005D
000266 ff03      	SBRS R16,3
000267 c002      	RJMP _0x200005E
000268 5f29      	SUBI R18,-LOW(7)
000269 c001      	RJMP _0x200005F
                 _0x200005E:
00026a 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00026b fd04      	SBRC R16,4
00026c c01a      	RJMP _0x2000061
00026d 3321      	CPI  R18,49
00026e f420      	BRSH _0x2000063
00026f 85a8      	LDD  R26,Y+8
000270 85b9      	LDD  R27,Y+8+1
000271 9711      	SBIW R26,1
000272 f409      	BRNE _0x2000062
                 _0x2000063:
000273 c009      	RJMP _0x20000CA
                 _0x2000062:
000274 1753      	CP   R21,R19
000275 f010      	BRLO _0x2000067
000276 ff00      	SBRS R16,0
000277 c001      	RJMP _0x2000068
                 _0x2000067:
000278 c013      	RJMP _0x2000066
                 _0x2000068:
000279 e220      	LDI  R18,LOW(32)
00027a ff07      	SBRS R16,7
00027b c00b      	RJMP _0x2000069
00027c e320      	LDI  R18,LOW(48)
                 _0x20000CA:
00027d 6100      	ORI  R16,LOW(16)
00027e ff02      	SBRS R16,2
00027f c007      	RJMP _0x200006A
000280 7f0b      	ANDI R16,LOW(251)
000281 934a      	ST   -Y,R20
000282 940e 03ee 	CALL SUBOPT_0x4
000284 3050      	CPI  R21,0
000285 f009      	BREQ _0x200006B
000286 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000287 940e 03e1 	CALL SUBOPT_0x2
000289 3050      	CPI  R21,0
00028a f009      	BREQ _0x200006C
00028b 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00028c 5031      	SUBI R19,LOW(1)
00028d 85a8      	LDD  R26,Y+8
00028e 85b9      	LDD  R27,Y+8+1
00028f 9712      	SBIW R26,2
000290 f008      	BRLO _0x2000059
000291 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000292 ff00      	SBRS R16,0
000293 c008      	RJMP _0x200006D
                 _0x200006E:
000294 3050      	CPI  R21,0
000295 f031      	BREQ _0x2000070
000296 5051      	SUBI R21,LOW(1)
000297 e2e0      	LDI  R30,LOW(32)
000298 93ea      	ST   -Y,R30
000299 940e 03ee 	CALL SUBOPT_0x4
00029b cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000C9:
00029c e010      	LDI  R17,LOW(0)
                 _0x200001B:
00029d cedd      	RJMP _0x2000016
                 _0x2000018:
00029e 85ac      	LDD  R26,Y+12
00029f 85bd      	LDD  R27,Y+12+1
0002a0 940e 041e 	CALL __GETW1P
0002a2 940e 0432 	CALL __LOADLOCR6
0002a4 9664      	ADIW R28,20
0002a5 9508      	RET
                 _sprintf:
0002a6 92ff      	PUSH R15
0002a7 2ef8      	MOV  R15,R24
0002a8 9726      	SBIW R28,6
0002a9 940e 042d 	CALL __SAVELOCR4
0002ab 940e 0406 	CALL SUBOPT_0x7
0002ad 9730      	SBIW R30,0
0002ae f419      	BRNE _0x2000072
0002af efef      	LDI  R30,LOW(65535)
0002b0 efff      	LDI  R31,HIGH(65535)
0002b1 c023      	RJMP _0x20C0003
                 _0x2000072:
0002b2 01de      	MOVW R26,R28
0002b3 9616      	ADIW R26,6
0002b4 940e 0416 	CALL __ADDW2R15
0002b6 018d      	MOVW R16,R26
0002b7 940e 0406 	CALL SUBOPT_0x7
0002b9 83ee      	STD  Y+6,R30
0002ba 83ff      	STD  Y+6+1,R31
0002bb e0e0      	LDI  R30,LOW(0)
0002bc 87e8      	STD  Y+8,R30
0002bd 87e9      	STD  Y+8+1,R30
0002be 01de      	MOVW R26,R28
0002bf 961a      	ADIW R26,10
0002c0 940e 0416 	CALL __ADDW2R15
0002c2 940e 041e 	CALL __GETW1P
0002c4 93fa      	ST   -Y,R31
0002c5 93ea      	ST   -Y,R30
0002c6 931a      	ST   -Y,R17
0002c7 930a      	ST   -Y,R16
0002c8 e2ef      	LDI  R30,LOW(_put_buff_G100)
0002c9 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002ca 93fa      	ST   -Y,R31
0002cb 93ea      	ST   -Y,R30
0002cc 01de      	MOVW R26,R28
0002cd 961a      	ADIW R26,10
0002ce dea0      	RCALL __print_G100
0002cf 019f      	MOVW R18,R30
0002d0 81ae      	LDD  R26,Y+6
0002d1 81bf      	LDD  R27,Y+6+1
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 93ec      	ST   X,R30
0002d4 01f9      	MOVW R30,R18
                 _0x20C0003:
0002d5 940e 0434 	CALL __LOADLOCR4
0002d7 962a      	ADIW R28,10
0002d8 90ff      	POP  R15
0002d9 9508      	RET
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G102:
0002da e0ff          ldi   r31,15
                 __lcd_delay0:
0002db 95fa          dec   r31
0002dc f7f1          brne  __lcd_delay0
0002dd 9508      	RET
                 __lcd_ready:
0002de b3a4          in    r26,__lcd_direction
0002df 70af          andi  r26,0xf                 ;set as input
0002e0 bba4          out   __lcd_direction,r26
0002e1 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002e2 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0002e3 dff6      	RCALL __lcd_delay_G102
0002e4 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0002e5 dff4      	RCALL __lcd_delay_G102
0002e6 b3a3          in    r26,__lcd_pin
0002e7 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0002e8 dff1      	RCALL __lcd_delay_G102
0002e9 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0002ea dfef      	RCALL __lcd_delay_G102
0002eb 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0002ec fda7          sbrc  r26,__lcd_busy_flag
0002ed cff5          rjmp  __lcd_busy
0002ee 9508      	RET
                 __lcd_write_nibble_G102:
0002ef 7fa0          andi  r26,0xf0
0002f0 2bab          or    r26,r27
0002f1 bba5          out   __lcd_port,r26          ;write
0002f2 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
0002f3 940e 02da 	CALL __lcd_delay_G102
0002f5 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
0002f6 940e 02da 	CALL __lcd_delay_G102
0002f8 9508      	RET
                 __lcd_write_data:
0002f9 93aa      	ST   -Y,R26
0002fa 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002fb b3a4          in    r26,__lcd_direction
0002fc 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0002fd bba4          out   __lcd_direction,r26
0002fe b3b5          in    r27,__lcd_port
0002ff 70bf          andi  r27,0xf
000300 81a8          ld    r26,y
000301 dfed      	RCALL __lcd_write_nibble_G102
000302 81a8          ld    r26,y
000303 95a2          swap  r26
000304 dfea      	RCALL __lcd_write_nibble_G102
000305 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000306 940c 03bb 	JMP  _0x20C0001
                 __lcd_read_nibble_G102:
000308 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000309 940e 02da 	CALL __lcd_delay_G102
00030b b3e3          in    r30,__lcd_pin           ;read
00030c 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00030d 940e 02da 	CALL __lcd_delay_G102
00030f 7fe0          andi  r30,0xf0
000310 9508      	RET
                 _lcd_read_byte0_G102:
000311 940e 02da 	CALL __lcd_delay_G102
000313 dff4      	RCALL __lcd_read_nibble_G102
000314 2fae          mov   r26,r30
000315 dff2      	RCALL __lcd_read_nibble_G102
000316 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
000317 95e2          swap  r30
000318 2bea          or    r30,r26
000319 9508      	RET
                 _lcd_gotoxy:
00031a 93aa      	ST   -Y,R26
00031b 940e 02de 	CALL __lcd_ready
00031d 81e8      	LD   R30,Y
00031e e0f0      	LDI  R31,0
00031f 58ec      	SUBI R30,LOW(-__base_y_G102)
000320 4ffe      	SBCI R31,HIGH(-__base_y_G102)
000321 81e0      	LD   R30,Z
000322 81a9      	LDD  R26,Y+1
000323 0fae      	ADD  R26,R30
000324 940e 02f9 	CALL __lcd_write_data
000326 8089      	LDD  R8,Y+1
000327 80b8      	LDD  R11,Y+0
000328 9622      	ADIW R28,2
000329 9508      	RET
                 _lcd_clear:
00032a 940e 02de 	CALL __lcd_ready
00032c e0a2      	LDI  R26,LOW(2)
00032d 940e 02f9 	CALL __lcd_write_data
00032f 940e 02de 	CALL __lcd_ready
000331 e0ac      	LDI  R26,LOW(12)
000332 940e 02f9 	CALL __lcd_write_data
000334 940e 02de 	CALL __lcd_ready
000336 e0a1      	LDI  R26,LOW(1)
000337 940e 02f9 	CALL __lcd_write_data
000339 e0e0      	LDI  R30,LOW(0)
00033a 2ebe      	MOV  R11,R30
00033b 2e8e      	MOV  R8,R30
00033c 9508      	RET
                 _lcd_putchar:
00033d 93aa      	ST   -Y,R26
00033e 93ef          push r30
00033f 93ff          push r31
000340 81a8          ld   r26,y
000341 9468          set
000342 30aa          cpi  r26,10
000343 f019          breq __lcd_putchar1
000344 94e8          clt
000345 148a      	CP   R8,R10
000346 f030      	BRLO _0x2040004
                 	__lcd_putchar1:
000347 94b3      	INC  R11
000348 e0e0      	LDI  R30,LOW(0)
000349 93ea      	ST   -Y,R30
00034a 2dab      	MOV  R26,R11
00034b dfce      	RCALL _lcd_gotoxy
00034c f036      	brts __lcd_putchar0
                 _0x2040004:
00034d 9483      	INC  R8
00034e df8f          rcall __lcd_ready
00034f 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
000350 81a8      	LD   R26,Y
000351 940e 02f9 	CALL __lcd_write_data
                 __lcd_putchar0:
000353 91ff          pop  r31
000354 91ef          pop  r30
000355 940c 03bb 	JMP  _0x20C0001
                 _lcd_puts:
000357 93ba      	ST   -Y,R27
000358 93aa      	ST   -Y,R26
000359 931a      	ST   -Y,R17
                 _0x2040005:
00035a 81a9      	LDD  R26,Y+1
00035b 81ba      	LDD  R27,Y+1+1
00035c 91ed      	LD   R30,X+
00035d 83a9      	STD  Y+1,R26
00035e 83ba      	STD  Y+1+1,R27
00035f 2f1e      	MOV  R17,R30
000360 30e0      	CPI  R30,0
000361 f019      	BREQ _0x2040007
000362 2fa1      	MOV  R26,R17
000363 dfd9      	RCALL _lcd_putchar
000364 cff5      	RJMP _0x2040005
                 _0x2040007:
000365 c010      	RJMP _0x20C0002
                 _lcd_putsf:
000366 93ba      	ST   -Y,R27
000367 93aa      	ST   -Y,R26
000368 931a      	ST   -Y,R17
                 _0x2040008:
000369 81e9      	LDD  R30,Y+1
00036a 81fa      	LDD  R31,Y+1+1
00036b 9631      	ADIW R30,1
00036c 83e9      	STD  Y+1,R30
00036d 83fa      	STD  Y+1+1,R31
00036e 9731      	SBIW R30,1
00036f 91e4      	LPM  R30,Z
000370 2f1e      	MOV  R17,R30
000371 30e0      	CPI  R30,0
000372 f019      	BREQ _0x204000A
000373 2fa1      	MOV  R26,R17
000374 dfc8      	RCALL _lcd_putchar
000375 cff3      	RJMP _0x2040008
                 _0x204000A:
                 _0x20C0002:
000376 8118      	LDD  R17,Y+0
000377 9623      	ADIW R28,3
000378 9508      	RET
                 __long_delay_G102:
000379 27aa          clr   r26
00037a 27bb          clr   r27
                 __long_delay0:
00037b 9711          sbiw  r26,1         ;2 cycles
00037c f7f1          brne  __long_delay0 ;2 cycles
00037d 9508      	RET
                 __lcd_init_write_G102:
00037e 93aa      	ST   -Y,R26
00037f 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000380 b3a4          in    r26,__lcd_direction
000381 6fa7          ori   r26,0xf7                ;set as output
000382 bba4          out   __lcd_direction,r26
000383 b3b5          in    r27,__lcd_port
000384 70bf          andi  r27,0xf
000385 81a8          ld    r26,y
000386 940e 02ef 	CALL __lcd_write_nibble_G102
000388 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000389 c031      	RJMP _0x20C0001
                 _lcd_init:
00038a 93aa      	ST   -Y,R26
00038b 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00038c 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
00038d 80a8      	LDD  R10,Y+0
00038e 81e8      	LD   R30,Y
00038f 58e0      	SUBI R30,-LOW(128)
                +
000390 93e0 0176+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000392 81e8      	LD   R30,Y
000393 54e0      	SUBI R30,-LOW(192)
                +
000394 93e0 0177+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000396 940e 040d 	CALL SUBOPT_0x8
000398 940e 040d 	CALL SUBOPT_0x8
00039a 940e 040d 	CALL SUBOPT_0x8
00039c dfdc      	RCALL __long_delay_G102
00039d e2a0      	LDI  R26,LOW(32)
00039e dfdf      	RCALL __lcd_init_write_G102
00039f dfd9      	RCALL __long_delay_G102
0003a0 e2a8      	LDI  R26,LOW(40)
0003a1 940e 0412 	CALL SUBOPT_0x9
0003a3 e0a4      	LDI  R26,LOW(4)
0003a4 940e 0412 	CALL SUBOPT_0x9
0003a6 e8a5      	LDI  R26,LOW(133)
0003a7 940e 0412 	CALL SUBOPT_0x9
0003a9 b3a4          in    r26,__lcd_direction
0003aa 70af          andi  r26,0xf                 ;set as input
0003ab bba4          out   __lcd_direction,r26
0003ac 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0003ad 940e 0311 	CALL _lcd_read_byte0_G102
0003af 30e5      	CPI  R30,LOW(0x5)
0003b0 f011      	BREQ _0x204000B
0003b1 e0e0      	LDI  R30,LOW(0)
0003b2 c008      	RJMP _0x20C0001
                 _0x204000B:
0003b3 940e 02de 	CALL __lcd_ready
0003b5 e0a6      	LDI  R26,LOW(6)
0003b6 940e 02f9 	CALL __lcd_write_data
0003b8 940e 032a 	CALL _lcd_clear
0003ba e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
0003bb 9621      	ADIW R28,1
0003bc 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
0003bd 93ba      	ST   -Y,R27
0003be 93aa      	ST   -Y,R26
0003bf 91a9          ld   r26,y+
0003c0 91b9          ld   r27,y+
0003c1 27ee          clr  r30
0003c2 27ff          clr  r31
                 strlen0:
0003c3 916d          ld   r22,x+
0003c4 2366          tst  r22
0003c5 f011          breq strlen1
0003c6 9631          adiw r30,1
0003c7 cffb          rjmp strlen0
                 strlen1:
0003c8 9508          ret
                 _strlenf:
0003c9 93ba      	ST   -Y,R27
0003ca 93aa      	ST   -Y,R26
0003cb 27aa          clr  r26
0003cc 27bb          clr  r27
0003cd 91e9          ld   r30,y+
0003ce 91f9          ld   r31,y+
                 strlenf0:
0003cf 9005      	lpm  r0,z+
0003d0 2000          tst  r0
0003d1 f011          breq strlenf1
0003d2 9611          adiw r26,1
0003d3 cffb          rjmp strlenf0
                 strlenf1:
0003d4 01fd          movw r30,r26
0003d5 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _temp:
000160           	.BYTE 0x10
                 __seed_G101:
000170           	.BYTE 0x4
                 __base_y_G102:
000174           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0003d6 27ff      	CLR  R31
0003d7 2766      	CLR  R22
0003d8 2777      	CLR  R23
0003d9 940e 0426 	CALL __PUTPARD1
0003db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0003dc e0e0      	LDI  R30,LOW(0)
0003dd 93ea      	ST   -Y,R30
0003de e0a1      	LDI  R26,LOW(1)
0003df 940c 031a 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0003e1 932a      	ST   -Y,R18
0003e2 85ad      	LDD  R26,Y+13
0003e3 85be      	LDD  R27,Y+13+1
0003e4 85ef      	LDD  R30,Y+15
0003e5 89f8      	LDD  R31,Y+15+1
0003e6 9509      	ICALL
0003e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0003e8 89e8      	LDD  R30,Y+16
0003e9 89f9      	LDD  R31,Y+16+1
0003ea 9734      	SBIW R30,4
0003eb 8be8      	STD  Y+16,R30
0003ec 8bf9      	STD  Y+16+1,R31
0003ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0003ee 85ad      	LDD  R26,Y+13
0003ef 85be      	LDD  R27,Y+13+1
0003f0 85ef      	LDD  R30,Y+15
0003f1 89f8      	LDD  R31,Y+15+1
0003f2 9509      	ICALL
0003f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0003f4 89a8      	LDD  R26,Y+16
0003f5 89b9      	LDD  R27,Y+16+1
0003f6 9614      	ADIW R26,4
0003f7 940e 041e 	CALL __GETW1P
0003f9 83ee      	STD  Y+6,R30
0003fa 83ff      	STD  Y+6+1,R31
0003fb 81ae      	LDD  R26,Y+6
0003fc 81bf      	LDD  R27,Y+6+1
0003fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0003fe 89a8      	LDD  R26,Y+16
0003ff 89b9      	LDD  R27,Y+16+1
000400 9614      	ADIW R26,4
000401 940e 041e 	CALL __GETW1P
000403 87ea      	STD  Y+10,R30
000404 87fb      	STD  Y+10+1,R31
000405 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000406 01de      	MOVW R26,R28
000407 961c      	ADIW R26,12
000408 940e 0416 	CALL __ADDW2R15
00040a 940e 041e 	CALL __GETW1P
00040c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00040d 940e 0379 	CALL __long_delay_G102
00040f e3a0      	LDI  R26,LOW(48)
000410 940c 037e 	JMP  __lcd_init_write_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000412 940e 02f9 	CALL __lcd_write_data
000414 940c 0379 	JMP  __long_delay_G102
                 
                 
                 	.CSEG
                 __ADDW2R15:
000416 2400      	CLR  R0
000417 0daf      	ADD  R26,R15
000418 1db0      	ADC  R27,R0
000419 9508      	RET
                 
                 __ANEGW1:
00041a 95f1      	NEG  R31
00041b 95e1      	NEG  R30
00041c 40f0      	SBCI R31,0
00041d 9508      	RET
                 
                 __GETW1P:
00041e 91ed      	LD   R30,X+
00041f 91fc      	LD   R31,X
000420 9711      	SBIW R26,1
000421 9508      	RET
                 
                 __GETW1PF:
000422 9005      	LPM  R0,Z+
000423 91f4      	LPM  R31,Z
000424 2de0      	MOV  R30,R0
000425 9508      	RET
                 
                 __PUTPARD1:
000426 937a      	ST   -Y,R23
000427 936a      	ST   -Y,R22
000428 93fa      	ST   -Y,R31
000429 93ea      	ST   -Y,R30
00042a 9508      	RET
                 
                 __SAVELOCR6:
00042b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00042c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00042d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00042e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00042f 931a      	ST   -Y,R17
000430 930a      	ST   -Y,R16
000431 9508      	RET
                 
                 __LOADLOCR6:
000432 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000433 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000434 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000435 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000436 8119      	LDD  R17,Y+1
000437 8108      	LD   R16,Y
000438 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :  10 r5 :   5 r6 :   5 r7 :   5 
r8 :   4 r9 :   3 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  27 r18:  29 r19:   8 r20:   9 r21:  17 r22:   6 r23:   2 
r24:   9 r25:   2 r26: 127 r27:  45 r28:  14 r29:   1 r30: 204 r31:  66 
x  :  23 y  : 175 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  24 and   :   0 andi  :  10 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  84 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  20 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :  13 cpc   :   2 cpi   :  37 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   9 inc   :   6 jmp   :  30 ld    :  25 ldd   :  79 ldi   : 109 
lds   :   0 lpm   :  16 lsl   :   0 lsr   :   0 mov   :  25 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   2 
ori   :   8 out   :  24 pop   :   3 push  :   3 rcall :  19 ret   :  32 
reti  :   1 rjmp  :  61 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   9 sbic  :   3 sbis  :   0 sbiw  :  17 sbr   :   0 sbrc  :   3 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  64 std   :  33 sts   :   2 sub   :   1 subi  :  16 swap  :   2 
tst   :   5 wdr   :   0 
Instructions used: 57 out of 116 (49.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000872   2058    104   2162   16384  13.2%
[.dseg] 0x000060 0x000178      0     24     24    1119   2.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
